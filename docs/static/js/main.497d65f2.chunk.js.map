{"version":3,"sources":["components/Header.js","context/CategoriasContext.js","context/RecetasContext.js","components/Formulario.js","context/ModalContext.js","components/Receta.js","components/ListaRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriasProvider","props","useState","categorias","setCategorias","useEffect","a","Axios","get","data","drinks","getGategorias","Provider","value","children","RecetasContext","RecetasProvider","recetas","setRecetas","nombre","categoria","busqueda","setBusquedaReceta","consultar","setConsultar","url","resultado","getRecetas","Formulario","useContext","setBusqueda","getDatosReceta","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","map","key","strCategory","ModalContext","ModalProvider","idReceta","setIdReceta","recetaDetalle","setReceta","getReceta","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Receta","receta","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ingredientes","index","push","mostrarIngredientes","ListaRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.497d65f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"bg-alert\">\r\n            <h1>Busca Recetas de Bebidas</h1>\r\n        </header>\r\n      );\r\n}\r\n \r\nexport default Header;","import React, { createContext, useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\n//Crear el Context\r\nexport const CategoriasContext = createContext();\r\n\r\n//Provider es donde se encuentran las funciones y state\r\nconst CategoriasProvider = (props) => {\r\n  //crear el state del Context\r\n  const [categorias, setCategorias] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getGategorias = async () => {\r\n      const url = \"https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list\";\r\n      const categorias = await Axios.get(url);\r\n      setCategorias(categorias.data.drinks);\r\n    };\r\n    getGategorias();\r\n  }, []);\r\n\r\n  return (\r\n    <CategoriasContext.Provider\r\n      value={{\r\n        categorias\r\n      }}\r\n    >\r\n      {props.children}\r\n    </CategoriasContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CategoriasProvider;\r\n","import React, { createContext, useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\n//Crear el Context\r\nexport const RecetasContext = createContext();\r\n\r\n//Provider es donde se encuentran las funciones y state\r\nconst RecetasProvider = (props) => {\r\n  //crear el state del Context\r\n  const [recetas, setRecetas] = useState([]);\r\n\r\n  const [busqueda, setBusquedaReceta] = useState({\r\n    nombre: \"\",\r\n    categoria: \"\",\r\n  });\r\n\r\n  const [consultar, setConsultar] = useState(false);\r\n\r\n  const { nombre, categoria } = busqueda;\r\n\r\n  useEffect(() => {\r\n    if (consultar) {\r\n      const getRecetas = async () => {\r\n        const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${nombre}&c=${categoria}`;\r\n        const resultado = await Axios.get(url);\r\n        setRecetas(resultado.data.drinks);      };\r\n      getRecetas();\r\n    }\r\n  }, [busqueda]);\r\n\r\n  return (\r\n    <RecetasContext.Provider\r\n      value={{\r\n        recetas,\r\n        setBusquedaReceta,\r\n        setConsultar,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </RecetasContext.Provider>\r\n  );\r\n};\r\n\r\nexport default RecetasProvider;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { CategoriasContext } from \"../context/CategoriasContext\";\r\nimport { RecetasContext } from \"../context/RecetasContext\";\r\n\r\nconst Formulario = () => {\r\n  const { setBusquedaReceta, setConsultar } = useContext(RecetasContext);\r\n  const { categorias } = useContext(CategoriasContext);\r\n  const [busqueda, setBusqueda] = useState({\r\n    nombre: \"\",\r\n    categoria: \"\",\r\n  });\r\n\r\n  const getDatosReceta = (e) => {\r\n    setBusqueda({\r\n      ...busqueda,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"col-12\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        setBusquedaReceta(busqueda);\r\n        setConsultar(true);\r\n      }}\r\n    >\r\n      <fieldset className=\"text-center\">\r\n        <legend> Busca bebidas por Categoría o Ingrediente</legend>\r\n      </fieldset>\r\n      <div className=\"row mt-4\">\r\n        <div className=\"col-md-4\">\r\n          <input\r\n            name=\"nombre\"\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            placeholder=\"Buscar por Ingrediente\"\r\n            onChange={getDatosReceta}\r\n          ></input>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <select\r\n            className=\"form-control\"\r\n            name=\"categoria\"\r\n            onChange={getDatosReceta}\r\n          >\r\n            <option value=\"\">--Selecciona Categoría--</option>\r\n            {categorias &&\r\n              categorias.map((categoria) => (\r\n                <option\r\n                  key={categoria.strCategory}\r\n                  value={categoria.strCategory}\r\n                >\r\n                  {categoria.strCategory}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <input\r\n            type=\"submit\"\r\n            className=\"btn btn-block btn-primary\"\r\n            value=\"Buscar Bebidas\"\r\n          ></input>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React, { createContext, useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\n//Crear el Context\r\nexport const ModalContext = createContext();\r\n\r\n//Provider es donde se encuentran las funciones y state\r\nconst ModalProvider = (props) => {\r\n  const [idReceta, setIdReceta] = useState(null);\r\n  const [recetaDetalle, setReceta] = useState({});\r\n\r\n  useEffect(() => {\r\n    const getReceta = async () => {\r\n      if (!idReceta) return;\r\n      const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idReceta}`;\r\n      const resultado = await Axios.get(url);\r\n      setReceta(resultado.data.drinks[0]);\r\n    };\r\n    getReceta();\r\n  }, [idReceta]);\r\n\r\n  return (\r\n    <ModalContext.Provider\r\n      value={{\r\n        recetaDetalle,\r\n        setIdReceta,\r\n        setReceta\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ModalProvider;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { ModalContext } from \"../context/ModalContext\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nconst Receta = ({ receta }) => {\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const { setIdReceta, recetaDetalle, setReceta } = useContext(ModalContext);\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const mostrarIngredientes = (recetaDetalle) => {\r\n    let ingredientes = [];\r\n    for (let index = 1; index < 16; index++) {\r\n      if (recetaDetalle[`strIngredient${index}`]) {\r\n        ingredientes.push(\r\n          <li>\r\n            {recetaDetalle[`strIngredient${index}`]}{\" \"}\r\n            {recetaDetalle[`strMeasure${index}`]}\r\n          </li>\r\n        );\r\n      }\r\n    }\r\n    return ingredientes;\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-4 mb-3\">\r\n      <div className=\"card\">\r\n        <h2 className=\"card-header\">{receta.strDrink}</h2>\r\n        <img\r\n          className=\"card-img-top\"\r\n          src={receta.strDrinkThumb}\r\n          alt={`Imagen de ${receta.strDrink}`}\r\n        ></img>\r\n        <div className=\"card-body\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-block btn-primary\"\r\n            onClick={() => {\r\n              setIdReceta(receta.idDrink);\r\n              handleOpen();\r\n            }}\r\n          >\r\n            Ver Receta\r\n          </button>\r\n          <Modal\r\n            open={open}\r\n            onClose={() => {\r\n              setIdReceta(null);\r\n              setReceta({});\r\n              handleClose();\r\n            }}\r\n          >\r\n            <div style={modalStyle} className={classes.paper}>\r\n              <h2>{recetaDetalle.strDrink}</h2>\r\n              <h3 className=\"mt-4\">Instrucciones</h3>\r\n              <p>{recetaDetalle.strInstructions}</p>\r\n              <img\r\n                className=\"img-fluid my-4\"\r\n                src={recetaDetalle.strDrinkThumb}\r\n                alt={`Detalle de ${receta.strDrink}`}\r\n              ></img>\r\n              <h3>Ingredientes y cantidades</h3>\r\n              <ul>{mostrarIngredientes(recetaDetalle)}</ul>\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Receta;\r\n","import React, { useContext } from \"react\";\r\nimport { RecetasContext } from \"../context/RecetasContext\";\r\nimport Receta from \"./Receta\";\r\n\r\nconst ListaRecetas = () => {\r\n  const { recetas } = useContext(RecetasContext);\r\n  return (\r\n    <div className=\"row mt-5\">\r\n      {recetas &&\r\n        recetas.map((receta) => (\r\n          <Receta key={receta.idDrink} receta={receta}></Receta>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListaRecetas;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport CategoriasProvider from \"./context/CategoriasContext\";\nimport RecetasProvider from \"./context/RecetasContext\";\nimport ListaRecetas from \"./components/ListaRecetas\";\nimport ModalProvider from \"./context/ModalContext\";\n\nfunction App() {\n  return (\n    <CategoriasProvider>\n      <RecetasProvider>\n        <ModalProvider>\n          <Header></Header>\n          <div className=\"container mt-5\">\n            <div className=\"row\">\n              <Formulario></Formulario>\n            </div>\n            <ListaRecetas></ListaRecetas>\n          </div>\n        </ModalProvider>\n      </RecetasProvider>\n    </CategoriasProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}